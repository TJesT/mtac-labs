import runtime;
import lingo/pegcode/driver;

Exp ::= Mul, Add, Int;
Add(left : Exp, right : Exp);
Mul(left : Exp, right : Exp);

ExpRPN(rpn: [OpRPN]);
OpRPN ::= AddRPN, MulRPN, Int;
AddRPN();
MulRPN();

Int(value: int);

queue_pop(queue: ref [?]) -> ? {
    el = ^queue[0];
    queue := subrange(^queue, 1, length(^queue));
    el;
}

stack_pop(stack: ref [?]) -> ? {
	topPos = length(^stack) - 1;
	el = ^stack[topPos];
	stack := subrange(^stack, 0, topPos);
    el;
}

alg_calc(exp : Exp) -> int {
    switch (exp) {
        Add(l, r): alg_calc(l) + alg_calc(r);
        Mul(l, r): alg_calc(l) * alg_calc(r);
        Int(i): i;
    }
}

rpn_calc(e : ExpRPN) -> int {
	r = fold(e.rpn, ref [], 
        \stack, exp -> {
            switch(exp) {
                Int(val): refArrayPush(stack, val);
                MulRPN(): refArrayPush(stack, stack_pop(stack) * stack_pop(stack));
                AddRPN(): refArrayPush(stack, stack_pop(stack) + stack_pop(stack));
            };
            stack;
        });
	stack_pop(r);
}

rpn_grammar_singleton : ref Maybe<[PegOp]> = ref None();

rpn_grammar() {
    onlyOnce(rpn_grammar_singleton, \ -> {
        compilePegGrammar("#include /home/tjest/area9/flow-dump/2/rpn.lingo");
	});
}

s2rpn(s: string) -> ExpRPN {
    ExpRPN(parsic(rpn_grammar(), s, defaultPegActions));
}

alg_grammar_singleton : ref Maybe<[PegOp]> = ref None();

alg_grammar() {
    onlyOnce(alg_grammar_singleton, \ -> {
        compilePegGrammar("#include /home/tjest/area9/flow-dump/2/alg.lingo");
	});
}

s2alg(s: string) -> Exp {
    parsic(alg_grammar(), s, defaultPegActions);
}

alg2rpn(exp: Exp) -> ExpRPN {
	switch(exp) {
		Add(l, r): 
			ExpRPN(concat(concat(alg2rpn(l).rpn, alg2rpn(r).rpn), [AddRPN()]));
		Mul(l, r): 
			ExpRPN(concat(concat(alg2rpn(l).rpn, alg2rpn(r).rpn), [MulRPN()]));
		Int(val): 
			ExpRPN([Int(val)]);
	}
}

rpn2alg(exp_rpn: ExpRPN) -> Exp {
    fold(exp_rpn.rpn, ref [], \stack, exp -> {
        switch(exp) {
            Int(i): refArrayPush(stack, Int(i));
            MulRPN(): {
                r = stack_pop(stack);
                l = stack_pop(stack);
                refArrayPush(stack, Mul(l ,r));
            };
            AddRPN(): {
                r = stack_pop(stack);
                l = stack_pop(stack);
                refArrayPush(stack, Add(l ,r));
            };
        };
        stack;
    }) |> stack_pop;
}

main() {
    exp_alg = "2 + 2 * (2 + 3 + 4*5)";
    exp_alg |> println;
    exp_alg |> s2alg |> println;
    exp_alg |> s2alg |> alg_calc |> println;
    exp_alg |> s2alg |> alg2rpn |> rpn_calc |> println;

    exp_rpn = "2 2 2 3 4 5 * + + * +";
    exp_rpn |> println;
    exp_rpn |> s2rpn |> println;
    exp_rpn |> s2rpn |> rpn_calc |> println;
    exp_rpn |> s2rpn |> rpn2alg |> alg_calc |> println;
   
    quit(0);
}
