import lingo/pegcode/driver;
import ds/tree;
import math/math;

export {
    Exp ::= Int, Double, Var, Add, Mul, Sub, Div, Mod, Pow, Ln;
    
    Add : (left : Exp, right : Exp);
    Sub : (left : Exp, right : Exp);
    Mul : (left : Exp, right : Exp);
    Div : (left : Exp, right : Exp);
    Mod : (left : Exp, right : Exp);
    Pow : (left : Exp, right : Exp);
    Ln  : (value : Exp);

    Int    : (i : int);
    Double : (d : double);

    Var : (name : string);

    s2exp(str_exp : string) -> Exp;
    exp2s(exp : Exp) -> string;
    exp2spolish(exp : Exp) -> string;
}

grammar_singleton : ref Maybe<[PegOp]> = ref None();

grammar() {
    onlyOnce(grammar_singleton, \ -> {
		compilePegGrammar("#include alg/lang.lingo");
	});
}

s2exp(str_exp : string) -> Exp {
    parsic(grammar(), str_exp, defaultPegActions);
}

exp2s(exp : Exp) -> string {
    switch (exp) {
        Add(left, right): 
            "(" + exp2s(left) + " + " + exp2s(right) + ")";
        Mul(left, right): 
            "(" + exp2s(left) + " * " + exp2s(right) + ")";
        Sub(left, right):
            "(" + exp2s(left) + " - " + exp2s(right) + ")";
        Div(left, right):
            "(" + exp2s(left) + " / " + exp2s(right) + ")";
        Mod(left, right):
            "(" + exp2s(left) + " % " + exp2s(right) + ")";
        Pow(left, right):
            "(" + exp2s(left) + " ^ " + exp2s(right) + ")";
        Ln(val): "ln(" + exp2s(val) + ")";
        Int(i):    i2s(i);
        Double(d): d2s(d);
        Var(name): name;
    }
}

exp2spolish(exp : Exp) -> string {
    switch (exp) {
        Add(left, right):
            exp2spolish(left) + " " + exp2spolish(right) + " +";
        Mul(left, right): 
            exp2spolish(left) + " " + exp2spolish(right) + " *";
        Sub(left, right): 
            exp2spolish(left) + " " + exp2spolish(right) + " -";
        Div(left, right): 
            exp2spolish(left) + " " + exp2spolish(right) + " /";
        Mod(left, right): 
            exp2spolish(left) + " " + exp2spolish(right) + " %";
        Pow(left, right): 
            exp2spolish(left) + " " + exp2spolish(right) + " ^";
        Ln(val): exp2spolish(val) + " Ln";
        Int(i)   : i2s(i);
        Double(d): d2s(d);
        Var(name): name;
    }
}