import alg/gram;
import alg/derv;

export {
    vars : ref Tree<string, double> = ref setTree(makeTree(), "math_e", 2.7182818284590452);

    calc_exp(exp : Exp, vars : Tree<string, double>) -> double;
    calc_spolish(string_polish: string, vars: Tree<string, double>) -> double ;
}

calc_spolish(string_polish: string, vars: Tree<string, double>) -> double {
    ops: [string] = ["+", "-", "*", "/", "%", "^"];

    res: ref [string] = fold(strSplit(string_polish, " "), ref [], 
        \stack, token -> if(contains(ops, token)) {
                l: string = ^stack[length(^stack)-2];
                r: string = ^stack[length(^stack)-1];
                stack := subrange(^stack, 0, length(^stack)-2);
                ref concat(^stack, 
                    [calc_exp(concatStrings(["(", l, " ", token, " " , r, ")"]) |> s2exp, vars) |> d2s]);
            } else {
                ref concat(^stack, [token]);
            });

    ^res[0] |> s2d;
}

calc_exp(exp : Exp, vars : Tree<string, double>) -> double {
    switch (exp) {
        Add(arg1, arg2): calc_exp(arg1, vars) + calc_exp(arg2, vars);
        Mul(arg1, arg2): calc_exp(arg1, vars) * calc_exp(arg2, vars);
        Sub(arg1, arg2): calc_exp(arg1, vars) - calc_exp(arg2, vars);
        Div(arg1, arg2): calc_exp(arg1, vars) / {val : double = calc_exp(arg2, vars);
            if (val == 0.0) {
                println("Exception: division by zero");
                s2d("nan");
            } else {
                val;
            }
        };
        Mod(arg1, arg2): calc_exp(arg1, vars) % calc_exp(arg2, vars);
        Pow(arg1, arg2): {
            left  : double = calc_exp(arg1, vars);
            right : double = calc_exp(arg2, vars);
            
            if (left == 0.0 && right < 0.0) {
                println("Exception: zero with negative degree");
                s2d("nan");
            } else if (left < 0.0 && right > -1.0 && right < 1.0) {
                println("Exception: negative num with |degree| < 1 ");
                s2d("nan");
            } else {
                dpow(left, right);
            }
        };
        Ln(val): log(calc_exp(val, vars));

        Derivative(arg, v): {
            calc_exp(exp_simplify(derivative2exp(arg, v, vars)), vars);
        }

        Int(i): i2d(i);
        Double(d): d;
        Var(name): {
            lookupTreeDef(vars, name, s2d("nan"));
        };
    }
}